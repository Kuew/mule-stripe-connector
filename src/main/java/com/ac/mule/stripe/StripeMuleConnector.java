/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.ac.mule.stripe;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.ConnectivityTesting;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Optional;

import com.stripe.exception.APIConnectionException;
import com.stripe.exception.APIException;
import com.stripe.exception.AuthenticationException;
import com.stripe.exception.CardException;
import com.stripe.exception.InvalidRequestException;
import com.stripe.model.Customer;
import com.stripe.model.DeletedCustomer;
import com.stripe.model.Invoice;
import com.stripe.model.InvoiceCollection;
import com.stripe.model.Plan;
import com.stripe.model.PlanCollection;
import com.stripe.model.Subscription;
import com.stripe.model.Token;

/**
 * Cloud Connector
 * 
 * @author MuleSoft, Inc.
 */
@Connector(name = "stripemuleconnector", schemaVersion = "1.0.0-SNAPSHOT", friendlyName = "Stripe Mule Connector", description = "Stripe Integration", minMuleVersion = "3.5", connectivityTesting = ConnectivityTesting.DISABLED)
public class StripeMuleConnector {

    /**
     * Create Account
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    @Processor
    public Subscription cancelSubscription(String apiKey, String stripeCustomerId, String planId) throws CardException, APIException, APIConnectionException,
            InvalidRequestException, AuthenticationException {

        Subscription s = null;
        Customer cu = null;

        cu = Customer.retrieve(stripeCustomerId, apiKey);
        List<Subscription> coll = cu.getSubscriptions().getData();

        for (Subscription sub : coll) {

            // find subscription to cancel
            if (sub.getPlan().getId().equals(planId) && !sub.getStatus().equalsIgnoreCase("canceled") && sub.getCanceledAt() == null) {

                Map<String, Object> params = new HashMap<String, Object>();
                params.put("at_period_end", true);
                s = sub.cancel(params, apiKey);

            }
        }

        return s;
    }

    /**
     * Create Account
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    @Processor
    public Subscription changeSubscribedPlan(String apiKey, String stripeCustomerId, String newPlanId) throws CardException, APIException,
            APIConnectionException, InvalidRequestException, AuthenticationException {

        Subscription sub = null;

        Customer cu = Customer.retrieve(stripeCustomerId);
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("plan", newPlanId);
        sub = cu.updateSubscription(params, apiKey);

        return sub;
    }

    /**
     * Create Account
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    @Processor
    public Customer createAccount(String apiKey, String email, String cardId) throws CardException, APIException, APIConnectionException,
            InvalidRequestException, AuthenticationException {

        Map<String, Object> params = new HashMap<String, Object>();
        params.put("card", cardId);
        params.put("email", email);

        Customer customer = Customer.create(params, apiKey);

        return customer;
    }

    /**
     * 
     * @param number
     * @param expMonth
     * @param expYear
     * @param cvc
     * @return
     * @throws CardException
     * @throws APIException
     * @throws APIConnectionException
     * @throws InvalidRequestException
     * @throws AuthenticationException
     */
    @Processor
    public Token createCreditCard(String apiKey, long number, int expMonth, int expYear, int cvc) throws CardException, APIException, APIConnectionException,
            InvalidRequestException, AuthenticationException {

        Map<String, Object> tokenParams = new HashMap<String, Object>();
        Map<String, Object> cardParams = new HashMap<String, Object>();
        cardParams.put("number", String.valueOf(number));
        cardParams.put("exp_month", expMonth);
        cardParams.put("exp_year", expYear);
        cardParams.put("cvc", String.valueOf(cvc));
        tokenParams.put("card", cardParams);

        Token cardToken = Token.create(tokenParams, apiKey);
        return cardToken;
    }

    /**
     * Connect
     * 
     * @param username
     *            A username
     * @param password
     *            A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey @Optional String username, @Password @Optional String password) throws ConnectionException {
        /* CODE FOR ESTABLISHING A CONNECTION GOES IN HERE */
    }

    /**
     * Create Account
     * 
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    @Processor
    public Subscription subscribeAccount(String apiKey, String stripeCustomerId, String planId) throws CardException, APIException, APIConnectionException,
            InvalidRequestException, AuthenticationException {

        Subscription sub = null;

        Customer cu = Customer.retrieve(stripeCustomerId, apiKey);

        Map<String, Object> params = new HashMap<String, Object>();
        params.put("plan", planId);
        sub = cu.createSubscription(params, apiKey);

        return sub;
    }

    @Processor
    public boolean deleteCustomer(String apiKey, String customerId) throws CardException, APIException, APIConnectionException, InvalidRequestException,
            AuthenticationException {
        Customer cust = Customer.retrieve(customerId, apiKey);
        DeletedCustomer deleted = cust.delete(apiKey);
        return deleted.getDeleted();
    }

    /**
     * Create Account
     * 
     * {@sample.xml ../../../doc/StripeMule-connector.xml.sample stripemuleconnector:get-invoices}
     * 
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    public List<Invoice> getInvoices(String apiKey, String stripeCustomerId) throws CardException, APIException, APIConnectionException,
            InvalidRequestException, AuthenticationException {

        Map<String, Object> invoiceParams = new HashMap<String, Object>();
        invoiceParams.put("customer", stripeCustomerId);
        invoiceParams.put("count", 10);
        InvoiceCollection coll = com.stripe.model.Invoice.all(invoiceParams, apiKey);

        return coll.getData();
    }

    /**
     * Create Account
     * 
     * 
     * @param accountId
     *            AccountId
     * @param email
     *            email
     * @param cardId
     * @return New customer Ids
     */
    @Processor
    public List<Plan> listPlans(String apiKey) throws CardException, APIException, APIConnectionException, InvalidRequestException, AuthenticationException {

        PlanCollection coll = null;

        coll = Plan.all(new HashMap<String, Object>(), apiKey);

        return coll.getData();

    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /* CODE FOR CLOSING A CONNECTION GOES IN HERE */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return true;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

}
