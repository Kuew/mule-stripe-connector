/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.ac.mule.stripe;

import java.util.HashMap;
import java.util.Map;

import junit.framework.Assert;

import org.junit.After;
import org.junit.Test;
import org.mule.api.MessagingException;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.tck.junit4.FunctionalTestCase;

import com.stripe.model.Customer;
import com.stripe.model.Token;

/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */
public class StripeMuleConnectorTest extends FunctionalTestCase {

    private String customerId;

    @Override
    protected String getConfigResources() {
        return "mule-config.xml";
    }

    @Test
    public void testCreateCreditCardToken() throws Exception {

        Flow flow = lookupFlowConstruct("createCreditCard");
        Map<String, Object> card = CreditCardTokenGenerator.generateCreditCardToken();
        MuleEvent cardEvent = getTestEvent(card);
        MuleEvent responseEvent = flow.process(cardEvent);

        Assert.assertNotNull(responseEvent);
        Token token = (Token) responseEvent.getMessage().getPayload();
        Assert.assertNotNull(token);
        Assert.assertNotNull(token.getCreated());

    }

    @Test
    public void testCreateAccount() throws Exception {

        Flow flow = lookupFlowConstruct("createCreditCard");
        Map<String, Object> card = CreditCardTokenGenerator.generateCreditCardToken();
        MuleEvent cardEvent = getTestEvent(card);
        MuleEvent responseEvent = flow.process(cardEvent);

        Assert.assertNotNull(responseEvent);
        Token token = (Token) responseEvent.getMessage().getPayload();
        Assert.assertNotNull(token);

        Map<String, Object> payload = new HashMap<String, Object>();
        payload.put("email", "test@gmail.com");
        payload.put("cardId", token.getId());

        flow = lookupFlowConstruct("createAccount");
        cardEvent = getTestEvent(payload);
        responseEvent = flow.process(cardEvent);

        Assert.assertNotNull(responseEvent);

        Customer customer = (Customer) responseEvent.getMessage().getPayload();
        Assert.assertNotNull(customer);
        customerId = customer.getId();
    }

    @Test(expected = MessagingException.class)
    public void testCreateAccountWithInvalidToken() throws Exception {

        Map<String, Object> payload = new HashMap<String, Object>();
        payload.put("email", "test@gmail.com");
        payload.put("cardId", "wewfwdfcdas");

        Flow flow = lookupFlowConstruct("createAccount");
        MuleEvent cardEvent = getTestEvent(payload);
        flow.process(cardEvent);

    }

    @After
    public void tearDown() throws Exception {

        if (customerId != null) {

            Flow flow = lookupFlowConstruct("deleteAccount");
            MuleEvent cardEvent = getTestEvent(customerId);
            MuleEvent responseEvent = flow.process(cardEvent);

            Assert.assertNotNull(responseEvent);
            Assert.assertTrue((Boolean) responseEvent.getMessage().getPayload());
            customerId = null;

        }

    }

}
